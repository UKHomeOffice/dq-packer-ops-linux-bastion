---
- name: Build Data Ingest Linux Server.
  hosts: all
  become: true
  tasks:
    - name: Set machine hostname
      shell: |
        hostname LINUX-BASTION1
        echo "LINUX-BASTION1" > /etc/hostname

    - name: Set timezone to Europe/London
      timezone:
        name: Europe/London
    # - name: DNF Install Dependencies
    #   dnf: name={{ item }}
    #   with_items:
    #     - python3.11
    #     - python3.11-pip
    #     #        - libselinux-python3
    #     - postgresql
    #     - zip
    #     - unzip
      become: true
    - name: Get AWS-CLI
      shell: |
        curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
        unzip awscliv2.zip
        ./aws/install
      become: true
      become_user: root

    - name: sed DNF Update
      shell: |
        sed -i 's/REGION/eu-west-2/' /etc/yum.repos.d/redhat-rhui*.repo
      become: true
    - name: PIP install botocore and boto3
      pip:
        name:
           - botocore
           - boto3
        executable: pip3.9
      become: true
      become_user: root  

    - name: Pull variable file from S3
      shell: |
        /usr/local/bin/aws s3 cp s3://dq-config-bucket/dqusers.yml /tmp/dqusers.yml
      become: true
      become_user: root 
    - name: Use fetch module for this task  
      fetch:
            src: "/tmp/dqusers.yml"
            dest: ./var/dqusers.yml
            flat: yes      

    - name: Read dqusers yaml
      include_vars:
        file: ./var/dqusers.yml

    - name: Create users for dqsupport members
      user:
          name: "{{ item.name }}"
          shell: /bin/bash
          createhome: yes                    
      with_items: "{{ dqusers }}"      

    - name: setup ssh pub key for abv defined users  
      authorized_key:
          user: '{{ item.name }}'
          key: "{{ item.pubkey | join('\n')  }}"
          state: "present" 
      with_items: "{{ dqusers }}"

    - name: deploy sudoers file
      template:
         src: dqsupport-sudoers.j2
         dest: /etc/sudoers.d/{{ item.userno }}-{{ item.name }}-user
      with_items: "{{ dqusers }}" 
      become: true
      become_user: root
    - name: Add hostname to /etc/hosts
      lineinfile:
        dest: /etc/hosts
        regexp: '^127\.0\.0\.1[ \t]+localhost'
        line: '127.0.0.1 localhost LINUX-BASTION1'
        state: present

    - name: Copy sudoers files for cloud-init to different location
      copy:
        src: '{{item}}'
        dest: /opt
        owner: root
        group: root
        mode: 0755
      loop:
        - 90-cloud-init-users
      become: true
      become_user: root   

    # - name: Create python link
    #   file:
    #     src: /usr/bin/python3.9
    #     dest: /usr/bin/python
    #     state: link
    #     force: true

    - name: GET CloudWatch logs config from DQ-config-bucket - cp
      command: /usr/local/bin/aws s3 cp s3://dq-config-bucket/dq-tableau-linux/awslogs-agent-setup.py /tmp

    - name: Set CloudWatch logs config executable
      command: chmod u+x /tmp/awslogs-agent-setup.py

    - name: Cloudwatch logs config
      copy:
        dest: /tmp/cwlogs.conf
        content: |
          [general]
          state_file = /var/awslogs/state/agent-state
          [/var/log/syslog]
          file = /var/log/syslog
          log_group_name = /Linux_Bastion/system
          log_stream_name = {instance_id}
          datetime_format = %b %d %H:%M:%S
          [/Linux_Bastion/cloud-init]
          file = /var/log/cloud-init.log
          log_group_name = /Linux_Bastion/cloud-init
          log_stream_name = {instance_id}
          datetime_format = %Y-%m-%d %H:%M:%S,%f
          [/Linux_Bastion/cloud-init/output]
          file = /var/log/cloud-init-output.log
          log_group_name = /Linux_Bastion/cloud-init/output
          log_stream_name = {instance_id}
          datetime_format = %Y-%m-%d %H:%M:%S,%f


    - name: Download CloudWatch Agent RPM
      get_url:
        url: https://s3.amazonaws.com/amazoncloudwatch-agent/redhat/amd64/latest/amazon-cloudwatch-agent.rpm
        dest: /tmp/amazon-cloudwatch-agent.rpm
        mode: '+x'

    - name: Install CloudWatch Agent RPM 
      raw: sudo dnf install -y --nogpgcheck /tmp/amazon-cloudwatch-agent.rpm


    - name: Create CloudWatch Agent config directory
      file:
        path: /opt/aws/amazon-cloudwatch-agent/etc/
        state: directory
        mode: '0755'

    - name: Configure unified CloudWatch Agent (metrics + logs)
      copy:
        dest: /opt/aws/amazon-cloudwatch-agent/etc/amazon-cloudwatch-agent.json
        content: |
          {
            "agent": {
              "metrics_collection_interval": 60
            },
            "metrics": {
              "namespace": "CWAgent",
              "append_dimensions": {
                "InstanceId": "${aws:InstanceId}"
              },
              "metrics_collected": {
                "disk": {
                  "measurement": ["used_percent"],
                  "metrics_collection_interval": 60,
                  "resources": ["*"],
                  "ignore_file_system_types": ["devtmpfs", "tmpfs"],
                  "drop_device": true
                },
                "diskio": {
                  "measurement": ["io_time"],
                  "metrics_collection_interval": 60,
                  "resources": ["*"]
                },
                "mem": {
                  "measurement": [
                    "mem_used_percent",
                    "mem_available_percent",
                    "mem_used",
                    "mem_cached",
                    "mem_total"
                  ],
                  "metrics_collection_interval": 60
                },
                "swap": {
                  "measurement": ["swap_used_percent"],
                  "metrics_collection_interval": 60
                }
              }
            },
            "logs": {
              "logs_collected": {
                "files": {
                  "collect_list": [
                    {
                      "file_path": "/var/log/messages",
                      "log_group_name": "/Linux_Bastion/messages",
                      "log_stream_name": "{instance_id}",
                      "timestamp_format": "%b %d %H:%M:%S"
                    },
                    {
                      "file_path": "/var/log/secure",
                      "log_group_name": "/Linux_Bastion/secure",
                      "log_stream_name": "{instance_id}",
                      "timestamp_format": "%Y-%m-%d %H:%M:%S"
                    }
                  ]
                }
              }
            }
          }

    - name: Start CloudWatch Agent with config
      shell: |
        /opt/aws/amazon-cloudwatch-agent/bin/amazon-cloudwatch-agent-ctl \
          -a fetch-config \
          -m ec2 \
          -c file:/opt/aws/amazon-cloudwatch-agent/etc/amazon-cloudwatch-agent.json \
          -s
      args:
        creates: /opt/aws/amazon-cloudwatch-agent/state/amazon-cloudwatch-agent.pid

    - name: Set DNS Resolver Options
      blockinfile:
        path: /etc/sysconfig/network
        block: |
          RES_OPTIONS="rotate timeout:1 attempts:1"

    # use 'executable: pip3.9' because by default Ansible Pip will use (pip3.6)
    - name: PIP install selinux bindings and boto3
      pip:
        name:
          - selinux
          - boto3
        executable: pip3.9

    - name: Secure sshd_config
      lineinfile:
        dest: /etc/ssh/sshd_config
        regexp: '^PermitRootLogin'
        line: 'PermitRootLogin no'
        state: present
    - lineinfile: dest=/etc/ssh/sshd_config
        regexp="^(.*)AllowTcpForwarding"
        line="AllowTcpForwarding no"
        state=present

    - name: sshd_config - PasswordAuthentication no
      lineinfile:
        dest: /etc/ssh/sshd_config
        regexp: '^PasswordAuthentication'
        line: 'PasswordAuthentication no'
        state: present

    - name: sshd_config - X11Forwarding no
      lineinfile:
        dest: /etc/ssh/sshd_config
        regexp: '^X11Forwarding'
        line: 'X11Forwarding no'
        state: present
